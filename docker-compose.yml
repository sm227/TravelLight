version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: travellight-app
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/travellight
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME:-postgres}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD:-TravelLight4-1}
      - SPRING_REDIS_PORT=6379
      - REDIS_PORT=6379
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
      - elasticsearch
    networks:
      - elk

  redis:
    image: redis:7-alpine
    container_name: travellight-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - elk

  # PostgreSQL 서비스 추가
  postgres:
    image: postgres:14-alpine
    container_name: travellight-postgres-master
    restart: always
    environment:
      - POSTGRES_DB=travellight
      - POSTGRES_USER=${DB_USERNAME:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-TravelLight4-1}
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=repl_TravelLight4-1
    volumes:
      - /mnt/data/postgresql:/var/lib/postgresql/data
      - ./master-config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./master-config/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./master-config/init-master.sh:/docker-entrypoint-initdb.d/init-master.sh
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    networks:
      - elk

  # ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.22
    container_name: travellight-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=true
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - elk
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.22
    container_name: travellight-logstash
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logs:/logs:ro
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      - "LS_JAVA_OPTS=-Xmx1g -Xms512m"
      - "ELASTICSEARCH_HOSTS=http://elasticsearch:9200"
    networks:
      - elk
    depends_on:
      elasticsearch:
        condition: service_healthy

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.22
    container_name: travellight-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=travellight-kibana
      - SERVER_HOST=0.0.0.0
    networks:
      - elk
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5


volumes:
  redis_data:
  elasticsearch_data:

networks:
  elk:
    driver: bridge